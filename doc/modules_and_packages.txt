Hierarchy
    Package -> Module

    - a module is an organizational unit in python
    - a module contains a namespace with arbitrary objects
    - modules are loaded through importing
    
    - a package is a python module that contains submodules recursively or subpackages
    - a package is a module that has a __path__ attribute
    - a regular package is a directory containing an __init__.py file

__path__
    This is an attribute that only packages have
    It is a list containing the locations of where to find its submodules

Module
    --> https://docs.python.org/3/tutorial/modules.html

Namespace Packages
    --> https://peps.python.org/pep-0420/
    --> https://packaging.python.org/en/latest/guides/packaging-namespace-packages/

Implicit Namespace packages
    You can ommit the __init__.py in these namespace packages

Examples
    Consider the follwoing directory layout
        ```
        parent/
            __init__.py
            one/
                __init__.py
            two/
                __init__.py
            three/
                __init__.py
        ````
    This example represents 'one regular package' that contains '3 regular subpackages'

Relative imports

Use cases on how a package is consumed
    - python -m test_package
        - __init__.py excecutes
        - __main__.py excecutes
    - import test_package
        - __init__.py excecutes

PYTHONPATH
    This is the equivalent of Lua's package.path

sys.path
    --> https://docs.python.org/3/library/sys.html#sys.path
    sys.path stores the search paths for imports

import system
    --> https://docs.python.org/3/reference/import.html

modules
    --> https://docs.python.org/3/tutorial/modules.html#tut-packages

